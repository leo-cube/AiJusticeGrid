/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/api-reports/route";
exports.ids = ["app/api/api-reports/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fapi-reports%2Froute&page=%2Fapi%2Fapi-reports%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fapi-reports%2Froute.ts&appDir=C%3A%5CUsers%5Ce629%5CDocuments%5CGitHub%5CAiJusticeGrid%5Cinvestigation-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ce629%5CDocuments%5CGitHub%5CAiJusticeGrid%5Cinvestigation-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fapi-reports%2Froute&page=%2Fapi%2Fapi-reports%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fapi-reports%2Froute.ts&appDir=C%3A%5CUsers%5Ce629%5CDocuments%5CGitHub%5CAiJusticeGrid%5Cinvestigation-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ce629%5CDocuments%5CGitHub%5CAiJusticeGrid%5Cinvestigation-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_e629_Documents_GitHub_AiJusticeGrid_investigation_main_src_app_api_api_reports_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/api-reports/route.ts */ \"(rsc)/./src/app/api/api-reports/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/api-reports/route\",\n        pathname: \"/api/api-reports\",\n        filename: \"route\",\n        bundlePath: \"app/api/api-reports/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\e629\\\\Documents\\\\GitHub\\\\AiJusticeGrid\\\\investigation-main\\\\src\\\\app\\\\api\\\\api-reports\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_e629_Documents_GitHub_AiJusticeGrid_investigation_main_src_app_api_api_reports_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhcGktcmVwb3J0cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYXBpLXJlcG9ydHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhcGktcmVwb3J0cyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNlNjI5JTVDRG9jdW1lbnRzJTVDR2l0SHViJTVDQWlKdXN0aWNlR3JpZCU1Q2ludmVzdGlnYXRpb24tbWFpbiU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDZTYyOSU1Q0RvY3VtZW50cyU1Q0dpdEh1YiU1Q0FpSnVzdGljZUdyaWQlNUNpbnZlc3RpZ2F0aW9uLW1haW4maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQzJEO0FBQ3hJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxlNjI5XFxcXERvY3VtZW50c1xcXFxHaXRIdWJcXFxcQWlKdXN0aWNlR3JpZFxcXFxpbnZlc3RpZ2F0aW9uLW1haW5cXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYXBpLXJlcG9ydHNcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FwaS1yZXBvcnRzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXBpLXJlcG9ydHNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2FwaS1yZXBvcnRzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcZTYyOVxcXFxEb2N1bWVudHNcXFxcR2l0SHViXFxcXEFpSnVzdGljZUdyaWRcXFxcaW52ZXN0aWdhdGlvbi1tYWluXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGFwaS1yZXBvcnRzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fapi-reports%2Froute&page=%2Fapi%2Fapi-reports%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fapi-reports%2Froute.ts&appDir=C%3A%5CUsers%5Ce629%5CDocuments%5CGitHub%5CAiJusticeGrid%5Cinvestigation-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ce629%5CDocuments%5CGitHub%5CAiJusticeGrid%5Cinvestigation-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/api-reports/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/api-reports/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _mocks_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/mocks/api */ \"(rsc)/./src/mocks/api.ts\");\n/* eslint-disable */ \n// Import mock data\n\n// Mock API reports data - this will be replaced by the imported mock data\n// but we keep it here for reference and type checking\nconst mockApiReports = [\n    {\n        id: 'API-1001',\n        title: 'Theft Case Analysis',\n        caseId: 'CR-1001',\n        caseType: 'theft',\n        generatedDate: '2025-05-10',\n        generatedBy: 'Agent Theft',\n        status: 'completed',\n        panels: [\n            {\n                id: 'PANEL-1001-1',\n                title: 'Case Summary',\n                type: 'summary',\n                content: 'Armed robbery at First National Bank. Suspects entered through the rear entrance at 10:15 AM and left with approximately $50,000 in cash.',\n                priority: 'high'\n            },\n            {\n                id: 'PANEL-1001-2',\n                title: 'Evidence Analysis',\n                type: 'evidence',\n                content: 'Security footage shows three masked individuals. Fingerprints recovered from the counter match those of a known offender. Weapon appears to be a 9mm handgun based on recovered shell casings.',\n                priority: 'medium'\n            },\n            {\n                id: 'PANEL-1001-3',\n                title: 'Recommendations',\n                type: 'recommendations',\n                content: 'Interview bank staff who were present during the robbery. Cross-reference the timing with nearby traffic cameras. Check for similar MO in recent robberies.',\n                priority: 'high',\n                assignedTo: 'John Doe'\n            }\n        ]\n    },\n    {\n        id: 'API-1002',\n        title: 'Financial Fraud Investigation',\n        caseId: 'CR-1002',\n        caseType: 'financial-fraud',\n        generatedDate: '2025-05-12',\n        generatedBy: 'Agent Finance',\n        status: 'completed',\n        panels: [\n            {\n                id: 'PANEL-1002-1',\n                title: 'Fraud Pattern Analysis',\n                type: 'analysis',\n                content: 'Multiple fraudulent credit card transactions detected across 15 different merchants. All transactions occurred within a 48-hour window. Total fraud amount: $12,345.',\n                priority: 'high'\n            },\n            {\n                id: 'PANEL-1002-2',\n                title: 'Timeline of Events',\n                type: 'timeline',\n                content: 'May 1: First fraudulent transaction\\nMay 2: Peak of fraudulent activity\\nMay 3: Last known transaction\\nMay 4: Fraud detection system alert',\n                priority: 'medium'\n            }\n        ]\n    },\n    {\n        id: 'API-1003',\n        title: 'Murder Investigation Report',\n        caseId: 'murder-case-1',\n        caseType: 'murder',\n        generatedDate: '2025-05-15',\n        generatedBy: 'Murder Chief',\n        status: 'pending',\n        panels: [\n            {\n                id: 'PANEL-1003-1',\n                title: 'Forensic Analysis',\n                type: 'analysis',\n                content: 'Preliminary forensic analysis indicates the victim died from blunt force trauma to the head. Time of death estimated between 11 PM and 2 AM.',\n                priority: 'high',\n                assignedTo: 'Forensic Team'\n            }\n        ]\n    }\n];\n/**\r\n * GET handler for API reports\r\n * Returns all API reports or a specific report by ID\r\n */ async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get('id');\n        const caseId = searchParams.get('caseId');\n        // If ID is provided, return specific report\n        if (id) {\n            const report = mockApiReports.find((report)=>report.id === id);\n            if (!report) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'API Report not found'\n                }, {\n                    status: 404\n                });\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(report, {\n                status: 200\n            });\n        }\n        // If caseId is provided, return reports for that case\n        if (caseId) {\n            const reports = mockApiReports.filter((report)=>report.caseId === caseId);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(reports, {\n                status: 200\n            });\n        }\n        // Otherwise return all reports\n        // Use the mock data from the imported mock API\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(_mocks_api__WEBPACK_IMPORTED_MODULE_1__[\"default\"]['/api-reports'], {\n            status: 200\n        });\n    } catch (error) {\n        console.error('Error fetching API reports:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to fetch API reports'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\r\n * POST handler for creating a new API report\r\n */ async function POST(request) {\n    try {\n        const body = await request.json();\n        // Validate required fields\n        if (!body.title || !body.caseId || !body.caseType) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing required fields'\n            }, {\n                status: 400\n            });\n        }\n        // In a real application, this would create a new report in the database\n        // For now, we'll just return a mock response\n        const newReport = {\n            id: `API-${Date.now()}`,\n            title: body.title,\n            caseId: body.caseId,\n            caseType: body.caseType,\n            generatedDate: new Date().toISOString().split('T')[0],\n            generatedBy: body.generatedBy || 'System',\n            status: 'pending',\n            panels: body.panels || []\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(newReport, {\n            status: 201\n        });\n    } catch (error) {\n        console.error('Error creating API report:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to create API report'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/api-reports/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/config/defaultSettings.json":
/*!*****************************************!*\
  !*** ./src/config/defaultSettings.json ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"api":{"baseUrl":"/api","endpoints":{"auth":"/auth","crimes":"/crimes","crimeTypes":"/crime-types","agents":"/agents","assignments":"/assignments","financialFraud":"/financial-fraud","exchangeMatching":"/exchange-matching","reports":"/reports","apiReports":"/api-reports","investigationReports":"/investigation-reports","designatedPanels":"/designated-panels","chat":"/chat","dashboard":"/dashboard","settings":"/settings"},"timeout":10000,"retryAttempts":3},"ui":{"theme":{"primary":"#3b82f6","secondary":"#10b981","accent":"#8b5cf6","error":"#ef4444","warning":"#f59e0b","info":"#3b82f6","success":"#10b981"},"dashboard":{"refreshInterval":60000,"defaultView":"summary"},"chat":{"maxMessages":100,"typingDelay":1500}},"crimeTypes":[{"id":"theft","name":"Theft","color":"bg-blue-100 text-blue-800","icon":"ShieldExclamationIcon"},{"id":"chain-snatching","name":"Chain Snatching","color":"bg-purple-100 text-purple-800","icon":"LinkIcon"},{"id":"murder","name":"Murder","color":"bg-red-100 text-red-800","icon":"ExclamationTriangleIcon"},{"id":"accident","name":"Accident","color":"bg-yellow-100 text-yellow-800","icon":"TruckIcon"},{"id":"abuse","name":"Abuse","color":"bg-orange-100 text-orange-800","icon":"HandRaisedIcon"},{"id":"financial-fraud","name":"Financial Fraud","color":"bg-green-100 text-green-800","icon":"CurrencyDollarIcon"},{"id":"exchange-matching","name":"Exchange Matching","color":"bg-purple-100 text-purple-800","icon":"ArrowsRightLeftIcon"}],"agentTypes":[{"id":"general","name":"General Assistant","description":"General investigation assistance and system guidance","avatarColor":"bg-blue-700","capabilities":["general-assistance","system-guidance","basic-investigation"]},{"id":"murder","name":"Murder Agent","description":"Specialized in homicide investigations and forensic analysis","avatarColor":"bg-red-700","capabilities":["forensic-analysis","motive-assessment","suspect-profiling"],"cases":[{"id":"murder-case-1","name":"Murder Case 1","assignedTo":"Police 1","status":"open"},{"id":"murder-case-2","name":"Murder Case 2","assignedTo":"Police 2","status":"in-progress"},{"id":"murder-case-3","name":"Murder Case 3","assignedTo":"Police 3","status":"open"}]},{"id":"finance","name":"Finance Agent","description":"Expert in financial fraud detection and analysis","avatarColor":"bg-green-700","capabilities":["fraud-detection","transaction-analysis","pattern-recognition"],"cases":[{"id":"fraud-case-1","name":"Fraud Case","assignedTo":"Police 1","status":"open"}]},{"id":"theft","name":"Theft Agent","description":"Specialized in theft investigations and pattern analysis","avatarColor":"bg-blue-700","capabilities":["theft-pattern-analysis","security-assessment","stolen-goods-tracking"],"cases":[]},{"id":"smuggle","name":"Smuggle Agent","description":"Expert in smuggling operations and border security","avatarColor":"bg-purple-700","capabilities":["border-security","contraband-detection","network-analysis"],"cases":[]},{"id":"crime-accident","name":"Agent Accident","description":"Expert in accident reconstruction and investigation","avatarColor":"bg-yellow-700","parentType":"crime","crimeType":"accident","capabilities":["accident-reconstruction","cause-analysis","negligence-assessment"]},{"id":"crime-abuse","name":"Agent Abuse","description":"Specialized in abuse cases and victim support","avatarColor":"bg-orange-700","parentType":"crime","crimeType":"abuse","capabilities":["victim-support","pattern-recognition","risk-assessment"]}],"agentAssignments":{"murder-case-1":"murder","murder-case-2":"murder","murder-case-3":"murder","fraud-case-1":"finance","theft":"theft","smuggle":"smuggle"},"enabledAgents":{"general":false,"murder":true,"finance":false,"theft":false,"smuggle":false,"crime-accident":false,"crime-abuse":false},"specializedAgentPrompts":{"murder":"You are the Murder Agent, an expert in homicide investigations and forensic analysis. Your job is to assist police in solving murder cases with detailed forensic insights, motive assessment, and suspect profiling. You have access to all murder cases and can provide insights on specific cases when asked.","finance":"You are the Finance Agent, specialized in financial fraud detection and analysis. Your job is to assist police in investigating financial crimes, tracking transaction chains, and identifying patterns of fraud. You can provide detailed analysis of financial records and suggest investigative approaches.","theft":"You are the Theft Agent, an expert in theft and robbery investigations. Your job is to assist police in solving theft-related cases with smart, actionable advice. You can analyze patterns of theft and provide recommendations for prevention and investigation.","smuggle":"You are the Smuggle Agent, specialized in smuggling operations and border security. Your job is to assist police in detecting and investigating smuggling operations, identifying contraband, and analyzing smuggling networks."}}');

/***/ }),

/***/ "(rsc)/./src/mocks/api.ts":
/*!**************************!*\
  !*** ./src/mocks/api.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   mockHandlers: () => (/* binding */ mockHandlers)\n/* harmony export */ });\n/* harmony import */ var _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config/defaultSettings.json */ \"(rsc)/./src/config/defaultSettings.json\");\n/* eslint-disable */ \n// Import mock data from default settings\nconst { crimeTypes, agentTypes, agentAssignments } = _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__;\n// Initialize mock agent status data from default settings\nconst mockAgentStatus = _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__.enabledAgents || {};\n// Mock user data\nconst mockUser = {\n    id: '1',\n    name: 'John Doe',\n    email: 'john.doe@police.gov',\n    role: 'admin',\n    badgeNumber: 'PD12345',\n    department: 'Cyber Crime Unit',\n    avatar: '/images/prtection.png'\n};\n// Mock crimes data\nconst mockCrimes = [\n    {\n        id: 'CR-1001',\n        title: 'Bank Robbery',\n        type: 'theft',\n        date: '2025-05-01',\n        location: {\n            lat: 40.7128,\n            lng: -74.006,\n            address: '123 Wall Street, New York, NY'\n        },\n        status: 'open',\n        severity: 'high',\n        assignedTo: 'John Doe',\n        description: 'Armed robbery at First National Bank'\n    },\n    {\n        id: 'CR-1002',\n        title: 'Credit Card Fraud',\n        type: 'financial-fraud',\n        date: '2025-05-03',\n        location: {\n            lat: 40.7142,\n            lng: -74.0119,\n            address: '456 Broadway, New York, NY'\n        },\n        status: 'in-progress',\n        severity: 'medium',\n        assignedTo: 'Jane Smith',\n        description: 'Multiple fraudulent credit card transactions detected'\n    }\n];\n// Mock financial fraud data\nconst mockFinancialFrauds = [\n    {\n        id: 'FF-2001',\n        date: '2025-05-12',\n        fraudType: 'Insider Trading',\n        entities: [\n            'XYZ Corp',\n            'John Smith'\n        ],\n        amount: 1250000,\n        currency: 'USD',\n        detectionMethod: 'Pattern Analysis',\n        riskScore: 85,\n        status: 'detected',\n        stocks: [\n            {\n                id: 'S1',\n                symbol: 'XYZ',\n                name: 'XYZ Corporation',\n                price: 45.67,\n                change: 12.5,\n                volume: 1500000\n            }\n        ],\n        transactions: [\n            {\n                id: 'T1',\n                date: '2025-05-10',\n                amount: 500000,\n                currency: 'USD',\n                fromEntity: 'John Smith',\n                toEntity: 'Offshore Account',\n                type: 'Wire Transfer'\n            },\n            {\n                id: 'T2',\n                date: '2025-05-11',\n                amount: 750000,\n                currency: 'USD',\n                fromEntity: 'John Smith',\n                toEntity: 'Investment Account',\n                type: 'Stock Purchase'\n            }\n        ]\n    }\n];\n// Mock exchange matches data\nconst mockExchangeMatches = [\n    {\n        id: 'EM-3001',\n        exchange1: 'Global Exchange A',\n        exchange2: 'Offshore Exchange B',\n        mismatchType: 'Transaction Volume Discrepancy',\n        severityScore: 92,\n        date: '2025-05-10',\n        detectionMethod: 'Automated Pattern Analysis',\n        status: 'detected'\n    }\n];\n// Mock API reports data\nconst mockApiReports = [\n    {\n        id: 'API-1001',\n        title: 'Theft Case Analysis',\n        caseId: 'CR-1001',\n        caseType: 'theft',\n        generatedDate: '2025-05-10',\n        generatedBy: 'Agent Theft',\n        status: 'completed',\n        panels: [\n            {\n                id: 'PANEL-1001-1',\n                title: 'Case Summary',\n                type: 'summary',\n                content: 'Armed robbery at First National Bank. Suspects entered through the rear entrance at 10:15 AM and left with approximately $50,000 in cash.',\n                priority: 'high'\n            },\n            {\n                id: 'PANEL-1001-2',\n                title: 'Evidence Analysis',\n                type: 'evidence',\n                content: 'Security footage shows three masked individuals. Fingerprints recovered from the counter match those of a known offender. Weapon appears to be a 9mm handgun based on recovered shell casings.',\n                priority: 'medium'\n            },\n            {\n                id: 'PANEL-1001-3',\n                title: 'Recommendations',\n                type: 'recommendations',\n                content: 'Interview bank staff who were present during the robbery. Cross-reference the timing with nearby traffic cameras. Check for similar MO in recent robberies.',\n                priority: 'high',\n                assignedTo: 'John Doe'\n            }\n        ]\n    },\n    {\n        id: 'API-1002',\n        title: 'Financial Fraud Investigation',\n        caseId: 'CR-1002',\n        caseType: 'financial-fraud',\n        generatedDate: '2025-05-12',\n        generatedBy: 'Agent Finance',\n        status: 'completed',\n        panels: [\n            {\n                id: 'PANEL-1002-1',\n                title: 'Fraud Pattern Analysis',\n                type: 'analysis',\n                content: 'Multiple fraudulent credit card transactions detected across 15 different merchants. All transactions occurred within a 48-hour window. Total fraud amount: $12,345.',\n                priority: 'high'\n            },\n            {\n                id: 'PANEL-1002-2',\n                title: 'Timeline of Events',\n                type: 'timeline',\n                content: 'May 1: First fraudulent transaction\\nMay 2: Peak of fraudulent activity\\nMay 3: Last known transaction\\nMay 4: Fraud detection system alert',\n                priority: 'medium'\n            }\n        ]\n    },\n    {\n        id: 'API-1003',\n        title: 'Murder Investigation Report',\n        caseId: 'murder-case-1',\n        caseType: 'murder',\n        generatedDate: '2025-05-15',\n        generatedBy: 'Murder Chief',\n        status: 'pending',\n        panels: [\n            {\n                id: 'PANEL-1003-1',\n                title: 'Forensic Analysis',\n                type: 'analysis',\n                content: 'Preliminary forensic analysis indicates the victim died from blunt force trauma to the head. Time of death estimated between 11 PM and 2 AM.',\n                priority: 'high',\n                assignedTo: 'Forensic Team'\n            }\n        ]\n    }\n];\n// Mock dashboard data\nconst mockDashboard = {\n    stats: [\n        {\n            id: 1,\n            name: 'Active Investigations',\n            value: 24,\n            change: 12,\n            changeType: 'increase',\n            icon: 'ChartBarIcon',\n            clickable: true\n        },\n        {\n            id: 2,\n            name: 'Crimes Reported',\n            value: 38,\n            change: 2,\n            changeType: 'decrease',\n            icon: 'DocumentTextIcon',\n            clickable: true\n        }\n    ],\n    caseTrends: [\n        {\n            id: 1,\n            name: 'Solving',\n            count: 12,\n            color: 'bg-green-100 text-green-800'\n        },\n        {\n            id: 2,\n            name: 'Losing',\n            count: 5,\n            color: 'bg-red-100 text-red-800'\n        },\n        {\n            id: 3,\n            name: 'Dormant',\n            count: 7,\n            color: 'bg-gray-100 text-gray-800'\n        }\n    ],\n    crimeCategories: crimeTypes.map((type, index)=>({\n            id: index + 1,\n            name: type.name,\n            count: Math.floor(Math.random() * 20) + 1,\n            color: type.color\n        }))\n};\n// Mock agent assignments\nconst mockAgentAssignments = Object.entries(agentAssignments).map(([crimeType, agentType], index)=>({\n        id: `AA-${1001 + index}`,\n        agentName: `Agent ${agentType.charAt(0).toUpperCase() + agentType.slice(1)}`,\n        agentType,\n        role: 'lead',\n        status: 'active',\n        caseId: `CR-${1001 + index}`,\n        caseTitle: `${crimeType.charAt(0).toUpperCase() + crimeType.slice(1)} Case`,\n        caseType: crimeType,\n        caseStatus: 'in-progress',\n        assignedDate: '2025-05-01',\n        priority: 'high'\n    }));\n// Mock suggested questions by agent type\nconst mockSuggestedQuestions = {\n    'degree-guru': [\n        'Are there resources for students interested in creative writing?',\n        'Are there any workshops or seminars on entrepreneurship for students?',\n        'Are there courses on environmental sustainability?',\n        'What kinds of courses will I take as a philosophy major?'\n    ],\n    'general': [\n        'What can you help me with?',\n        'Tell me about the latest cases',\n        'How do I analyze evidence?',\n        'What investigation techniques should I use?'\n    ],\n    'crime': [\n        'What are the recent crime statistics in the area?',\n        'How do I report suspicious activity?',\n        'What evidence is needed for a crime investigation?',\n        'How are crime scenes processed?'\n    ],\n    'murder': [\n        'What are the key steps in a homicide investigation?',\n        'How is forensic evidence collected at a murder scene?',\n        'What techniques are used for suspect profiling?',\n        'How are witness testimonies verified?'\n    ],\n    'finance': [\n        'What are common financial fraud indicators?',\n        'How do you trace money laundering activities?',\n        'What financial documents should be analyzed in fraud cases?',\n        'How are digital financial crimes investigated?'\n    ],\n    'theft': [\n        'What are the most common theft patterns?',\n        'How do you track stolen goods?',\n        'What security measures prevent theft?',\n        'How do you identify professional thieves?'\n    ],\n    'smuggle': [\n        'What are common smuggling routes?',\n        'How are smuggled goods detected?',\n        'What technologies are used to prevent smuggling?',\n        'How do international agencies coordinate on smuggling cases?'\n    ],\n    'crime-accident': [\n        'How do you determine if an accident was staged?',\n        'What evidence is crucial in accident reconstruction?',\n        'How do you analyze vehicle damage patterns?',\n        'What factors indicate negligence in accidents?'\n    ],\n    'crime-abuse': [\n        'What are the signs of domestic abuse?',\n        'How do you interview abuse victims sensitively?',\n        'What evidence collection protocols exist for abuse cases?',\n        'How do you ensure victim safety during investigations?'\n    ]\n};\n// Mock API endpoints\nconst mockApi = {\n    '/auth/login': {\n        user: mockUser,\n        token: 'mock-token'\n    },\n    '/auth/logout': {\n        success: true\n    },\n    '/auth/validate': {\n        valid: true,\n        user: mockUser\n    },\n    '/crimes': mockCrimes,\n    '/crime-types': crimeTypes,\n    '/agents': agentTypes,\n    '/agents/status': mockAgentStatus,\n    '/assignments': mockAgentAssignments,\n    '/financial-fraud': mockFinancialFrauds,\n    '/exchange-matching': mockExchangeMatches,\n    '/api-reports': mockApiReports,\n    '/dashboard': mockDashboard,\n    '/api/augment/suggested-questions': {\n        success: true,\n        data: mockSuggestedQuestions.general,\n        message: 'Default suggested questions retrieved successfully'\n    },\n    '/settings': {\n        ui: {\n            login: {\n                backgroundImage: '/images/invest.jpg'\n            },\n            theme: _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__.ui.theme\n        },\n        auth: {\n            demoCredentials: {\n                email: 'admin@police.gov',\n                password: 'password'\n            }\n        },\n        api: _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__.api\n    }\n};\n// Mock API handlers for POST, PUT, DELETE\nconst mockHandlers = {\n    '/api/augment/toggle-agent': {\n        get: ()=>{\n            console.log('Mock API: GET /api/augment/toggle-agent');\n            return {\n                success: true,\n                data: mockAgentStatus,\n                message: \"Successfully retrieved enabled agents\"\n            };\n        },\n        post: (data)=>{\n            console.log(`Mock API: POST /api/augment/toggle-agent - ${data.agentId} to ${data.enabled}`);\n            // Update the mock agent status\n            mockAgentStatus[data.agentId] = data.enabled;\n            return {\n                success: true,\n                data: {\n                    agentId: data.agentId,\n                    enabled: data.enabled\n                },\n                message: `Agent ${data.agentId} has been ${data.enabled ? 'enabled' : 'disabled'}`\n            };\n        }\n    },\n    '/auth/login': {\n        post: (data)=>{\n            if (data.email === 'admin@police.gov' && data.password === 'password') {\n                return {\n                    user: mockUser,\n                    token: 'mock-token'\n                };\n            }\n            throw new Error('Invalid credentials');\n        }\n    },\n    '/auth/logout': {\n        post: (data, headers)=>{\n            // Check if the token is valid (in a real app, this would verify the token)\n            const authHeader = headers?.Authorization || '';\n            const token = authHeader.replace('Bearer ', '');\n            if (token === 'mock-token') {\n                return {\n                    success: true\n                };\n            }\n            // If token is invalid, throw an error\n            throw new Error('Invalid token');\n        }\n    },\n    '/auth/validate': {\n        get: (headers)=>{\n            // Check if the token is valid (in a real app, this would verify the token)\n            const authHeader = headers?.Authorization || '';\n            const token = authHeader.replace('Bearer ', '');\n            if (token === 'mock-token') {\n                return {\n                    valid: true,\n                    user: mockUser\n                };\n            }\n            // If token is invalid, throw an error\n            throw new Error('Invalid token');\n        }\n    },\n    '/crimes': {\n        post: (data)=>{\n            const newCrime = {\n                ...data,\n                id: `CR-${1000 + mockCrimes.length + 1}`,\n                date: data.date || new Date().toISOString().split('T')[0]\n            };\n            mockCrimes.push(newCrime);\n            return newCrime;\n        },\n        put: (data)=>{\n            const index = mockCrimes.findIndex((crime)=>crime.id === data.id);\n            if (index !== -1) {\n                mockCrimes[index] = data;\n                return data;\n            }\n            throw new Error('Crime not found');\n        },\n        delete: (id)=>{\n            const index = mockCrimes.findIndex((crime)=>crime.id === id);\n            if (index !== -1) {\n                mockCrimes.splice(index, 1);\n                return {\n                    success: true\n                };\n            }\n            throw new Error('Crime not found');\n        }\n    },\n    '/agents/status': {\n        get: ()=>{\n            console.log('Mock API: GET /agents/status - Returning:', mockAgentStatus);\n            return mockAgentStatus;\n        },\n        put: (data)=>{\n            // Validate request\n            if (!data.agentId || typeof data.enabled !== 'boolean') {\n                console.error('Mock API: Invalid PUT request to /agents/status:', data);\n                throw new Error('Invalid request. Required fields: agentId, enabled');\n            }\n            console.log(`Mock API: PUT /agents/status - Setting ${data.agentId} to ${data.enabled}`);\n            // Update agent status\n            mockAgentStatus[data.agentId] = data.enabled;\n            // Return updated status\n            return {\n                agentId: data.agentId,\n                enabled: data.enabled,\n                message: `Agent ${data.agentId} ${data.enabled ? 'enabled' : 'disabled'} successfully`\n            };\n        },\n        patch: (data)=>{\n            // Validate request\n            if (!data.agents || typeof data.agents !== 'object') {\n                console.error('Mock API: Invalid PATCH request to /agents/status:', data);\n                throw new Error('Invalid request. Required field: agents (object)');\n            }\n            console.log('Mock API: PATCH /agents/status - Updating multiple agents:', data.agents);\n            // Update agent statuses\n            Object.assign(mockAgentStatus, data.agents);\n            console.log('Mock API: Updated agent statuses:', mockAgentStatus);\n            // Return updated statuses\n            return {\n                agents: mockAgentStatus,\n                message: 'Agent statuses updated successfully'\n            };\n        }\n    },\n    '/api-reports': {\n        post: (data)=>{\n            // Validate required fields\n            if (!data.title || !data.caseId || !data.caseType) {\n                throw new Error('Invalid request. Required fields: title, caseId, caseType');\n            }\n            // Create new API report\n            const newReport = {\n                id: `API-${1000 + mockApiReports.length + 1}`,\n                title: data.title,\n                caseId: data.caseId,\n                caseType: data.caseType,\n                generatedDate: data.generatedDate || new Date().toISOString().split('T')[0],\n                generatedBy: data.generatedBy || 'System',\n                status: data.status || 'pending',\n                panels: data.panels || []\n            };\n            // Add to mock data\n            mockApiReports.push(newReport);\n            return newReport;\n        }\n    },\n    '/designated-panels': {\n        post: (data)=>{\n            // Validate required fields\n            if (!data.reportId || !data.panel || !data.panel.title || !data.panel.type || !data.panel.content) {\n                throw new Error('Invalid request. Required fields: reportId, panel (with title, type, content)');\n            }\n            // Find the report\n            const report = mockApiReports.find((r)=>r.id === data.reportId);\n            if (!report) {\n                throw new Error(`Report not found: ${data.reportId}`);\n            }\n            // Create new panel\n            const newPanel = {\n                id: `PANEL-${report.id}-${report.panels.length + 1}`,\n                title: data.panel.title,\n                type: data.panel.type,\n                content: data.panel.content,\n                priority: data.panel.priority || 'medium',\n                assignedTo: data.panel.assignedTo,\n                metadata: data.panel.metadata\n            };\n            // Add to report panels\n            report.panels.push(newPanel);\n            return newPanel;\n        }\n    },\n    // Add more handlers as needed\n    '/api/augment/suggested-questions': {\n        get: (headers, url)=>{\n            // Extract agentType from URL query parameters\n            let agentType = 'general';\n            if (url && url.includes('?')) {\n                const queryString = url.split('?')[1];\n                const params = new URLSearchParams(queryString);\n                agentType = params.get('agentType') || 'general';\n            }\n            console.log(`Mock API: Fetching suggested questions for agent type: ${agentType}`);\n            // Get the suggested questions for the specified agent type\n            const questions = mockSuggestedQuestions[agentType] || mockSuggestedQuestions.general;\n            return {\n                success: true,\n                data: questions,\n                message: `Suggested questions for ${agentType} retrieved successfully`\n            };\n        }\n    },\n    '/settings': {\n        put: (data)=>{\n            // Update the mock settings with the new data\n            const updatedSettings = {\n                ...mockApi['/settings'],\n                ...data\n            };\n            // Update the mockApi object with the new settings\n            mockApi['/settings'] = updatedSettings;\n            console.log('Mock API: Settings updated successfully', updatedSettings);\n            // Return the updated settings\n            return updatedSettings;\n        }\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mockApi);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/mocks/api.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fapi-reports%2Froute&page=%2Fapi%2Fapi-reports%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fapi-reports%2Froute.ts&appDir=C%3A%5CUsers%5Ce629%5CDocuments%5CGitHub%5CAiJusticeGrid%5Cinvestigation-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ce629%5CDocuments%5CGitHub%5CAiJusticeGrid%5Cinvestigation-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();