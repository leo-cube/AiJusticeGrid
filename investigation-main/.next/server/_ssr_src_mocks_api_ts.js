"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_mocks_api_ts";
exports.ids = ["_ssr_src_mocks_api_ts"];
exports.modules = {

/***/ "(ssr)/./src/mocks/api.ts":
/*!**************************!*\
  !*** ./src/mocks/api.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   mockHandlers: () => (/* binding */ mockHandlers)\n/* harmony export */ });\n/* harmony import */ var _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config/defaultSettings.json */ \"(ssr)/./src/config/defaultSettings.json\");\n/* eslint-disable */ \n// Import mock data from default settings\nconst { crimeTypes, agentTypes, agentAssignments } = _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__;\n// Initialize mock agent status data from default settings\nconst mockAgentStatus = _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__.enabledAgents || {};\n// Mock user data\nconst mockUser = {\n    id: '1',\n    name: 'John Doe',\n    email: 'john.doe@police.gov',\n    role: 'admin',\n    badgeNumber: 'PD12345',\n    department: 'Cyber Crime Unit',\n    avatar: '/images/prtection.png'\n};\n// Mock crimes data\nconst mockCrimes = [\n    {\n        id: 'CR-1001',\n        title: 'Bank Robbery',\n        type: 'theft',\n        date: '2025-05-01',\n        location: {\n            lat: 40.7128,\n            lng: -74.006,\n            address: '123 Wall Street, New York, NY'\n        },\n        status: 'open',\n        severity: 'high',\n        assignedTo: 'John Doe',\n        description: 'Armed robbery at First National Bank'\n    },\n    {\n        id: 'CR-1002',\n        title: 'Credit Card Fraud',\n        type: 'financial-fraud',\n        date: '2025-05-03',\n        location: {\n            lat: 40.7142,\n            lng: -74.0119,\n            address: '456 Broadway, New York, NY'\n        },\n        status: 'in-progress',\n        severity: 'medium',\n        assignedTo: 'Jane Smith',\n        description: 'Multiple fraudulent credit card transactions detected'\n    }\n];\n// Mock financial fraud data\nconst mockFinancialFrauds = [\n    {\n        id: 'FF-2001',\n        date: '2025-05-12',\n        fraudType: 'Insider Trading',\n        entities: [\n            'XYZ Corp',\n            'John Smith'\n        ],\n        amount: 1250000,\n        currency: 'USD',\n        detectionMethod: 'Pattern Analysis',\n        riskScore: 85,\n        status: 'detected',\n        stocks: [\n            {\n                id: 'S1',\n                symbol: 'XYZ',\n                name: 'XYZ Corporation',\n                price: 45.67,\n                change: 12.5,\n                volume: 1500000\n            }\n        ],\n        transactions: [\n            {\n                id: 'T1',\n                date: '2025-05-10',\n                amount: 500000,\n                currency: 'USD',\n                fromEntity: 'John Smith',\n                toEntity: 'Offshore Account',\n                type: 'Wire Transfer'\n            },\n            {\n                id: 'T2',\n                date: '2025-05-11',\n                amount: 750000,\n                currency: 'USD',\n                fromEntity: 'John Smith',\n                toEntity: 'Investment Account',\n                type: 'Stock Purchase'\n            }\n        ]\n    }\n];\n// Mock exchange matches data\nconst mockExchangeMatches = [\n    {\n        id: 'EM-3001',\n        exchange1: 'Global Exchange A',\n        exchange2: 'Offshore Exchange B',\n        mismatchType: 'Transaction Volume Discrepancy',\n        severityScore: 92,\n        date: '2025-05-10',\n        detectionMethod: 'Automated Pattern Analysis',\n        status: 'detected'\n    }\n];\n// Mock API reports data\nconst mockApiReports = [\n    {\n        id: 'API-1001',\n        title: 'Theft Case Analysis',\n        caseId: 'CR-1001',\n        caseType: 'theft',\n        generatedDate: '2025-05-10',\n        generatedBy: 'Agent Theft',\n        status: 'completed',\n        panels: [\n            {\n                id: 'PANEL-1001-1',\n                title: 'Case Summary',\n                type: 'summary',\n                content: 'Armed robbery at First National Bank. Suspects entered through the rear entrance at 10:15 AM and left with approximately $50,000 in cash.',\n                priority: 'high'\n            },\n            {\n                id: 'PANEL-1001-2',\n                title: 'Evidence Analysis',\n                type: 'evidence',\n                content: 'Security footage shows three masked individuals. Fingerprints recovered from the counter match those of a known offender. Weapon appears to be a 9mm handgun based on recovered shell casings.',\n                priority: 'medium'\n            },\n            {\n                id: 'PANEL-1001-3',\n                title: 'Recommendations',\n                type: 'recommendations',\n                content: 'Interview bank staff who were present during the robbery. Cross-reference the timing with nearby traffic cameras. Check for similar MO in recent robberies.',\n                priority: 'high',\n                assignedTo: 'John Doe'\n            }\n        ]\n    },\n    {\n        id: 'API-1002',\n        title: 'Financial Fraud Investigation',\n        caseId: 'CR-1002',\n        caseType: 'financial-fraud',\n        generatedDate: '2025-05-12',\n        generatedBy: 'Agent Finance',\n        status: 'completed',\n        panels: [\n            {\n                id: 'PANEL-1002-1',\n                title: 'Fraud Pattern Analysis',\n                type: 'analysis',\n                content: 'Multiple fraudulent credit card transactions detected across 15 different merchants. All transactions occurred within a 48-hour window. Total fraud amount: $12,345.',\n                priority: 'high'\n            },\n            {\n                id: 'PANEL-1002-2',\n                title: 'Timeline of Events',\n                type: 'timeline',\n                content: 'May 1: First fraudulent transaction\\nMay 2: Peak of fraudulent activity\\nMay 3: Last known transaction\\nMay 4: Fraud detection system alert',\n                priority: 'medium'\n            }\n        ]\n    },\n    {\n        id: 'API-1003',\n        title: 'Murder Investigation Report',\n        caseId: 'murder-case-1',\n        caseType: 'murder',\n        generatedDate: '2025-05-15',\n        generatedBy: 'Murder Chief',\n        status: 'pending',\n        panels: [\n            {\n                id: 'PANEL-1003-1',\n                title: 'Forensic Analysis',\n                type: 'analysis',\n                content: 'Preliminary forensic analysis indicates the victim died from blunt force trauma to the head. Time of death estimated between 11 PM and 2 AM.',\n                priority: 'high',\n                assignedTo: 'Forensic Team'\n            }\n        ]\n    }\n];\n// Mock dashboard data\nconst mockDashboard = {\n    stats: [\n        {\n            id: 1,\n            name: 'Active Investigations',\n            value: 24,\n            change: 12,\n            changeType: 'increase',\n            icon: 'ChartBarIcon',\n            clickable: true\n        },\n        {\n            id: 2,\n            name: 'Crimes Reported',\n            value: 38,\n            change: 2,\n            changeType: 'decrease',\n            icon: 'DocumentTextIcon',\n            clickable: true\n        }\n    ],\n    caseTrends: [\n        {\n            id: 1,\n            name: 'Solving',\n            count: 12,\n            color: 'bg-green-100 text-green-800'\n        },\n        {\n            id: 2,\n            name: 'Losing',\n            count: 5,\n            color: 'bg-red-100 text-red-800'\n        },\n        {\n            id: 3,\n            name: 'Dormant',\n            count: 7,\n            color: 'bg-gray-100 text-gray-800'\n        }\n    ],\n    crimeCategories: crimeTypes.map((type, index)=>({\n            id: index + 1,\n            name: type.name,\n            count: Math.floor(Math.random() * 20) + 1,\n            color: type.color\n        }))\n};\n// Mock agent assignments\nconst mockAgentAssignments = Object.entries(agentAssignments).map(([crimeType, agentType], index)=>({\n        id: `AA-${1001 + index}`,\n        agentName: `Agent ${agentType.charAt(0).toUpperCase() + agentType.slice(1)}`,\n        agentType,\n        role: 'lead',\n        status: 'active',\n        caseId: `CR-${1001 + index}`,\n        caseTitle: `${crimeType.charAt(0).toUpperCase() + crimeType.slice(1)} Case`,\n        caseType: crimeType,\n        caseStatus: 'in-progress',\n        assignedDate: '2025-05-01',\n        priority: 'high'\n    }));\n// Mock suggested questions by agent type\nconst mockSuggestedQuestions = {\n    'degree-guru': [\n        'Are there resources for students interested in creative writing?',\n        'Are there any workshops or seminars on entrepreneurship for students?',\n        'Are there courses on environmental sustainability?',\n        'What kinds of courses will I take as a philosophy major?'\n    ],\n    'general': [\n        'What can you help me with?',\n        'Tell me about the latest cases',\n        'How do I analyze evidence?',\n        'What investigation techniques should I use?'\n    ],\n    'crime': [\n        'What are the recent crime statistics in the area?',\n        'How do I report suspicious activity?',\n        'What evidence is needed for a crime investigation?',\n        'How are crime scenes processed?'\n    ],\n    'murder': [\n        'What are the key steps in a homicide investigation?',\n        'How is forensic evidence collected at a murder scene?',\n        'What techniques are used for suspect profiling?',\n        'How are witness testimonies verified?'\n    ],\n    'finance': [\n        'What are common financial fraud indicators?',\n        'How do you trace money laundering activities?',\n        'What financial documents should be analyzed in fraud cases?',\n        'How are digital financial crimes investigated?'\n    ],\n    'theft': [\n        'What are the most common theft patterns?',\n        'How do you track stolen goods?',\n        'What security measures prevent theft?',\n        'How do you identify professional thieves?'\n    ],\n    'smuggle': [\n        'What are common smuggling routes?',\n        'How are smuggled goods detected?',\n        'What technologies are used to prevent smuggling?',\n        'How do international agencies coordinate on smuggling cases?'\n    ],\n    'crime-accident': [\n        'How do you determine if an accident was staged?',\n        'What evidence is crucial in accident reconstruction?',\n        'How do you analyze vehicle damage patterns?',\n        'What factors indicate negligence in accidents?'\n    ],\n    'crime-abuse': [\n        'What are the signs of domestic abuse?',\n        'How do you interview abuse victims sensitively?',\n        'What evidence collection protocols exist for abuse cases?',\n        'How do you ensure victim safety during investigations?'\n    ]\n};\n// Mock API endpoints\nconst mockApi = {\n    '/auth/login': {\n        user: mockUser,\n        token: 'mock-token'\n    },\n    '/auth/logout': {\n        success: true\n    },\n    '/auth/validate': {\n        valid: true,\n        user: mockUser\n    },\n    '/crimes': mockCrimes,\n    '/crime-types': crimeTypes,\n    '/agents': agentTypes,\n    '/agents/status': mockAgentStatus,\n    '/assignments': mockAgentAssignments,\n    '/financial-fraud': mockFinancialFrauds,\n    '/exchange-matching': mockExchangeMatches,\n    '/api-reports': mockApiReports,\n    '/dashboard': mockDashboard,\n    '/api/augment/suggested-questions': {\n        success: true,\n        data: mockSuggestedQuestions.general,\n        message: 'Default suggested questions retrieved successfully'\n    },\n    '/settings': {\n        ui: {\n            login: {\n                backgroundImage: '/images/invest.jpg'\n            },\n            theme: _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__.ui.theme\n        },\n        auth: {\n            demoCredentials: {\n                email: 'admin@police.gov',\n                password: 'password'\n            }\n        },\n        api: _config_defaultSettings_json__WEBPACK_IMPORTED_MODULE_0__.api\n    }\n};\n// Mock API handlers for POST, PUT, DELETE\nconst mockHandlers = {\n    '/api/augment/toggle-agent': {\n        get: ()=>{\n            console.log('Mock API: GET /api/augment/toggle-agent');\n            return {\n                success: true,\n                data: mockAgentStatus,\n                message: \"Successfully retrieved enabled agents\"\n            };\n        },\n        post: (data)=>{\n            console.log(`Mock API: POST /api/augment/toggle-agent - ${data.agentId} to ${data.enabled}`);\n            // Update the mock agent status\n            mockAgentStatus[data.agentId] = data.enabled;\n            return {\n                success: true,\n                data: {\n                    agentId: data.agentId,\n                    enabled: data.enabled\n                },\n                message: `Agent ${data.agentId} has been ${data.enabled ? 'enabled' : 'disabled'}`\n            };\n        }\n    },\n    '/auth/login': {\n        post: (data)=>{\n            if (data.email === 'admin@police.gov' && data.password === 'password') {\n                return {\n                    user: mockUser,\n                    token: 'mock-token'\n                };\n            }\n            throw new Error('Invalid credentials');\n        }\n    },\n    '/auth/logout': {\n        post: (data, headers)=>{\n            // Check if the token is valid (in a real app, this would verify the token)\n            const authHeader = headers?.Authorization || '';\n            const token = authHeader.replace('Bearer ', '');\n            if (token === 'mock-token') {\n                return {\n                    success: true\n                };\n            }\n            // If token is invalid, throw an error\n            throw new Error('Invalid token');\n        }\n    },\n    '/auth/validate': {\n        get: (headers)=>{\n            // Check if the token is valid (in a real app, this would verify the token)\n            const authHeader = headers?.Authorization || '';\n            const token = authHeader.replace('Bearer ', '');\n            if (token === 'mock-token') {\n                return {\n                    valid: true,\n                    user: mockUser\n                };\n            }\n            // If token is invalid, throw an error\n            throw new Error('Invalid token');\n        }\n    },\n    '/crimes': {\n        post: (data)=>{\n            const newCrime = {\n                ...data,\n                id: `CR-${1000 + mockCrimes.length + 1}`,\n                date: data.date || new Date().toISOString().split('T')[0]\n            };\n            mockCrimes.push(newCrime);\n            return newCrime;\n        },\n        put: (data)=>{\n            const index = mockCrimes.findIndex((crime)=>crime.id === data.id);\n            if (index !== -1) {\n                mockCrimes[index] = data;\n                return data;\n            }\n            throw new Error('Crime not found');\n        },\n        delete: (id)=>{\n            const index = mockCrimes.findIndex((crime)=>crime.id === id);\n            if (index !== -1) {\n                mockCrimes.splice(index, 1);\n                return {\n                    success: true\n                };\n            }\n            throw new Error('Crime not found');\n        }\n    },\n    '/agents/status': {\n        get: ()=>{\n            console.log('Mock API: GET /agents/status - Returning:', mockAgentStatus);\n            return mockAgentStatus;\n        },\n        put: (data)=>{\n            // Validate request\n            if (!data.agentId || typeof data.enabled !== 'boolean') {\n                console.error('Mock API: Invalid PUT request to /agents/status:', data);\n                throw new Error('Invalid request. Required fields: agentId, enabled');\n            }\n            console.log(`Mock API: PUT /agents/status - Setting ${data.agentId} to ${data.enabled}`);\n            // Update agent status\n            mockAgentStatus[data.agentId] = data.enabled;\n            // Return updated status\n            return {\n                agentId: data.agentId,\n                enabled: data.enabled,\n                message: `Agent ${data.agentId} ${data.enabled ? 'enabled' : 'disabled'} successfully`\n            };\n        },\n        patch: (data)=>{\n            // Validate request\n            if (!data.agents || typeof data.agents !== 'object') {\n                console.error('Mock API: Invalid PATCH request to /agents/status:', data);\n                throw new Error('Invalid request. Required field: agents (object)');\n            }\n            console.log('Mock API: PATCH /agents/status - Updating multiple agents:', data.agents);\n            // Update agent statuses\n            Object.assign(mockAgentStatus, data.agents);\n            console.log('Mock API: Updated agent statuses:', mockAgentStatus);\n            // Return updated statuses\n            return {\n                agents: mockAgentStatus,\n                message: 'Agent statuses updated successfully'\n            };\n        }\n    },\n    '/api-reports': {\n        post: (data)=>{\n            // Validate required fields\n            if (!data.title || !data.caseId || !data.caseType) {\n                throw new Error('Invalid request. Required fields: title, caseId, caseType');\n            }\n            // Create new API report\n            const newReport = {\n                id: `API-${1000 + mockApiReports.length + 1}`,\n                title: data.title,\n                caseId: data.caseId,\n                caseType: data.caseType,\n                generatedDate: data.generatedDate || new Date().toISOString().split('T')[0],\n                generatedBy: data.generatedBy || 'System',\n                status: data.status || 'pending',\n                panels: data.panels || []\n            };\n            // Add to mock data\n            mockApiReports.push(newReport);\n            return newReport;\n        }\n    },\n    '/designated-panels': {\n        post: (data)=>{\n            // Validate required fields\n            if (!data.reportId || !data.panel || !data.panel.title || !data.panel.type || !data.panel.content) {\n                throw new Error('Invalid request. Required fields: reportId, panel (with title, type, content)');\n            }\n            // Find the report\n            const report = mockApiReports.find((r)=>r.id === data.reportId);\n            if (!report) {\n                throw new Error(`Report not found: ${data.reportId}`);\n            }\n            // Create new panel\n            const newPanel = {\n                id: `PANEL-${report.id}-${report.panels.length + 1}`,\n                title: data.panel.title,\n                type: data.panel.type,\n                content: data.panel.content,\n                priority: data.panel.priority || 'medium',\n                assignedTo: data.panel.assignedTo,\n                metadata: data.panel.metadata\n            };\n            // Add to report panels\n            report.panels.push(newPanel);\n            return newPanel;\n        }\n    },\n    // Add more handlers as needed\n    '/api/augment/suggested-questions': {\n        get: (headers, url)=>{\n            // Extract agentType from URL query parameters\n            let agentType = 'general';\n            if (url && url.includes('?')) {\n                const queryString = url.split('?')[1];\n                const params = new URLSearchParams(queryString);\n                agentType = params.get('agentType') || 'general';\n            }\n            console.log(`Mock API: Fetching suggested questions for agent type: ${agentType}`);\n            // Get the suggested questions for the specified agent type\n            const questions = mockSuggestedQuestions[agentType] || mockSuggestedQuestions.general;\n            return {\n                success: true,\n                data: questions,\n                message: `Suggested questions for ${agentType} retrieved successfully`\n            };\n        }\n    },\n    '/settings': {\n        put: (data)=>{\n            // Update the mock settings with the new data\n            const updatedSettings = {\n                ...mockApi['/settings'],\n                ...data\n            };\n            // Update the mockApi object with the new settings\n            mockApi['/settings'] = updatedSettings;\n            console.log('Mock API: Settings updated successfully', updatedSettings);\n            // Return the updated settings\n            return updatedSettings;\n        }\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mockApi);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/mocks/api.ts\n");

/***/ })

};
;